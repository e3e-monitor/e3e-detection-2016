
#include <time.h>
#include <iostream>
#include <iomanip>
#include <complex>
#include <cmath>
#include <random>

#include <fftw3.h>

#include "../src/e3e_detection.h"
#include "../src/stft.h"
#include "../src/mfcc.h"

#define FFT_SIZE 128
#define FRAME_SIZE 128
#define NFRAMES 1
#define CHANNELS 2
#define MFCC_SIZE 14
#define FS 16000

float test1[] = { 0.475745854242, -0.372192507154, -0.113487817186,
  -0.285665709152, -0.496775614839, -0.435250958536, -1.38362608145,
  0.408132687284, -0.333277045911, 0.70811104998, -3.29537257069,
  0.154729037259, -1.98064284618, -0.500381588201, -0.0828278181597,
  2.89073401637, -0.439115525316, -1.49062103295, 0.066326044082,
  -1.51509148404, 0.182071222843, 1.3531379522, 0.891594106389, -1.74361122047,
  0.721135188159, 0.399524388641, -0.051861566479, 0.217664777029,
  0.347246364246, 0.796568205679, 1.29442313754, -1.73851595877,
  0.468013201155, -1.31423842151, -1.60645049908, 0.0553035686183,
  -0.171152574558, 1.25229820015, -1.79671715128, 1.0575879363,
  -0.457992042316, -1.4896493866, 0.981007495175, 0.265547781424,
  -1.63908306846, 0.460443324477, -0.808768250175, -1.14079880748,
  0.831516141706, -0.299790613156, -0.373027255899, 0.116578187569,
  0.221064881516, -0.561717520672, -0.502463264838, -0.198380687143,
  -0.644482710502, 0.564809626253, -0.210215647118, 1.38798614576,
  0.133230264696, -0.31181551288, 0.361691632704, -0.828842199929,
  -0.487851573841, -1.05234725867, 0.866256349995, -1.5733210155,
  0.217373014986, 0.68405533627, -1.20318917721, 0.954506161831,
  0.773912731239, 1.42589314149, -1.8852441124, 0.251677706087, 1.18277882617,
  -1.39156677454, 0.572192420821, -0.771585510791, 1.9447712552,
  0.859421109532, 0.40754136566, 0.956051971505, -0.12247809342, 0.99531888172,
  -0.212486357121, 0.874115007137, 0.568078825751, -0.129479458019,
  0.0709050666609, 0.903648787476, -0.687503178266, 0.883070670679,
  -1.38805822517, -0.928218785495, 1.84742274305, 0.84579066573,
  -1.46685481875, -0.251373839099, 0.552924261687, -0.219066315854,
  -0.162116066169, -0.453611370954, 2.08005794246, -1.49249936366,
  -1.58607655186, 1.96944136955, -0.310266206087, 0.643245216473,
  1.45779431555, 0.382765864916, 1.37475167694, -0.391340031082, 1.11615753604,
  -0.852086164847, 0.934522490688, -0.111723042717, -0.568351571098,
  -1.0331389877, -0.268917347119, 1.40396544354, -0.36274470517, 0.48336581552,
  -1.24973377031, 0.992917867713, -0.116420240742, 0.695839274711 };

float test2[] = {
  0.48696295, -0.9167002 ,  0.58407308,  1.77606262,  0.46346344,
       -0.61491053,  0.01855007, -0.93742437,  0.11537126, -2.14854076,
        0.42917804,  0.33182037, -2.16757221, -0.49953757, -0.34024969,
        0.25499428,  0.07897605, -0.71706112, -0.81609767, -0.99152534,
        2.38786192, -0.39833623,  0.13359083, -0.48974075,  0.6053875 ,
       -1.85861032, -0.91520316, -1.36067069,  1.53849107,  0.96683203,
       -1.25642564, -0.55789394, -0.74332676, -1.06075076, -1.41676089,
        0.48142759, -0.18558066,  0.55249712,  0.83532238, -0.05912274,
       -0.0975393 , -1.62995802,  0.40335038,  0.19303888,  0.74430175,
        0.12242307,  1.19625765, -1.09623254, -0.19104579,  0.74492   ,
       -0.28738031,  1.00759379,  0.03326391,  0.09094701, -0.04627913,
        0.41798376, -0.94831754, -0.59199807,  0.76469197, -0.49384744,
       -0.69214689, -0.07080029,  2.15335047, -1.00375974,  1.13396111,
       -0.11044244, -1.15922283, -0.53021018, -0.327455  , -0.7256047 ,
        1.03068453, -0.51616193,  0.28505629,  0.24578335,  0.29970304,
       -1.4550624 , -0.1765394 ,  0.7826027 , -1.2816264 ,  1.74213449,
       -2.10308788, -0.51216009, -1.15381646,  1.81528996,  2.37591775,
        0.16180517, -0.75098396, -0.78153442,  0.45947043,  1.5007672 ,
       -0.00379095, -0.50281572,  0.87782287, -0.58171961,  0.67568543,
       -0.17892484,  0.31823759,  0.25380584,  0.38669367,  0.19005715,
        0.17463361, -0.95916859,  0.75088547, -0.05290756,  0.09842073,
       -0.30353711,  0.18609029, -0.13819213,  0.62952645, -1.78231617,
       -1.07892966, -0.1315168 , -0.7535544 ,  1.82262587,  1.23415747,
        1.20011625,  0.79871972,  1.35388369,  0.90782706,  0.32808502,
        0.71627129, -0.11222175,  1.661535  ,  0.69984837,  0.42157237,
       -0.15998129, -0.76989797, -1.24697829
};

float result1[] = { 129.10023838,   -4.02923628,    4.84801306,    0.94161526,
          2.73825539,   -0.31240654,   -0.74349371,    2.58280035,
          0.89630423,    1.24215893,    4.47624486,    1.32645296,
          2.18388554,   -0.25800119 };

float result2[] = {
  1.31732452e+02,   6.52063566e-01,   5.80958279e-01,
         2.81379874e+00,   2.54819651e+00,  -2.15362889e+00,
        -2.53626099e-01,   8.83458098e-01,   7.51122771e-01,
        -1.52533835e+00,  -5.73556880e-01,   2.02081679e+00,
         9.58173081e-01,   1.09792011e-01
};

int main(int argc, char **argv)
{
  double error = 0.;
  STFT engine(FFT_SIZE, NFRAMES, CHANNELS);
  MFCC mfcc(MFCC_SIZE, FFT_SIZE, FS, 0., 0.5);
  float features[MFCC_SIZE * CHANNELS];

  // fill in the buffer
  float *ptr = engine.get_in_buffer();
  for (int i = 0 ; i < FFT_SIZE ; i++)
  {
    if (CHANNELS == 2)
    {
      ptr[2*i] = test1[i];
      ptr[2*i+1] = test2[i];
    }
    else if (CHANNELS == 1)
      ptr[i] = test1[i];

  }

  // do the FFT
  e3e_complex *X = engine.transform();

  // Now do the mfcc
  mfcc.transform(X, features, CHANNELS);

  // Check that the result is correct
  for (int i = 0 ; i < MFCC_SIZE ; i++)
  {
    if (CHANNELS == 1)
    {
      double e = features[i] - result1[i];
      error += e*e;
      std::cout << "1 " << features[i] << " " << result1[i] << std::endl;
    }
    else if (CHANNELS == 2)
    {
      double e = features[2*i] - result1[i];
      error += e*e;
      std::cout << "1 " << features[2*i] << " " << result1[i] << std::endl;

      e = features[2*i + 1] - result2[i];
      error += e*e;
      std::cout << "2 " << features[2*i + 1] << " " << result2[i] << std::endl;
    }
  }

  std::cout << "Error: " << error / CHANNELS << std::endl;

}
